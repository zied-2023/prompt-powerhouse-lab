import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { toast } from "@/hooks/use-toast";
import { useTranslation } from "@/hooks/useTranslation";
import { useAuth } from "@/contexts/AuthContext";
import { opikService } from "@/services/opikService";
import { llmRouter } from "@/services/llmRouter";
import { useUserCredits } from "@/hooks/useUserCredits";
import { buildStructuredPrompt } from "@/lib/promptFormatter";

import { 
  Brain, 
  CheckCircle, 
  ArrowRight, 
  ArrowLeft, 
  Lightbulb, 
  Eye,
  Sparkles,
  Save,
  Download,
  Copy,
  RefreshCw
} from "lucide-react";

import StepSelector from './StepSelector';
import StepContent from './StepContent';
import SmartSuggestions from './SmartSuggestions';
import LivePreview from './LivePreview';
import ValidationFeedback from './ValidationFeedback';
import { PromptData, StepConfig } from './types';
import { getStepConfigs } from './stepConfigs';
import { validateStep, calculateOverallProgress, getStepSuggestions } from './utils';

const AdvancedPromptBuilder = () => {
  const { t } = useTranslation();
  const { user } = useAuth();
  const { credits } = useUserCredits();
  const stepConfigs = getStepConfigs(t);
  
  // √âtats principaux
  const [currentStep, setCurrentStep] = useState(0);
  const [promptData, setPromptData] = useState<PromptData>({
    aiModel: '',
    objective: '',
    context: '',
    audience: '',
    tone: '',
    constraints: [],
    outputFormat: '',
    examples: [],
    keywords: []
  });
  
  // √âtats d'interaction
  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());
  const [isGenerating, setIsGenerating] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  
  // √âtats de l'UI
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [validationErrors, setValidationErrors] = useState<string[]>([]);
  const [stepSuggestions, setStepSuggestions] = useState<string[]>([]);
  const [generatedPrompt, setGeneratedPrompt] = useState('');

  // Sauvegarde automatique
  useEffect(() => {
    const saveTimer = setTimeout(() => {
      localStorage.setItem('advancedPromptBuilder', JSON.stringify({
        currentStep,
        promptData,
        completedSteps: Array.from(completedSteps)
      }));
      setLastSaved(new Date());
    }, 1000);
    
    return () => clearTimeout(saveTimer);
  }, [currentStep, promptData, completedSteps]);

  // Suggestions en temps r√©el (plus de validation bloquante)
  useEffect(() => {
    const errors = validateStep(currentStep, promptData);
    const stepSuggs = getStepSuggestions(currentStep, promptData);
    
    setValidationErrors(errors);
    setStepSuggestions(stepSuggs);
    
    // Marquer l'√©tape comme visit√©e (plus de condition stricte)
    setCompletedSteps(prev => new Set([...prev, currentStep]));
  }, [currentStep, promptData]);

  // G√©n√©ration de suggestions contextuelles
  useEffect(() => {
    const generateSuggestions = async () => {
      // Logique de g√©n√©ration de suggestions bas√©e sur l'√©tape actuelle et les donn√©es
      const newSuggestions = await getContextualSuggestions(currentStep, promptData);
      setSuggestions(newSuggestions);
    };
    
    generateSuggestions();
  }, [currentStep, promptData]);

  const handleStepChange = (newStep: number) => {
    // Navigation libre - plus de restrictions
    setCurrentStep(newStep);
    setShowPreview(false);
  };

  const handleNext = () => {
    if (currentStep < stepConfigs.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const generatePrompt = async () => {
    setIsGenerating(true);
    const startTime = Date.now();

    try {
      const creditsRemaining = credits?.remaining_credits || 0;
      const mode = creditsRemaining <= 10 ? 'free' : creditsRemaining <= 50 ? 'basic' : 'premium';

      console.log('üöÄ G√©n√©ration prompt avanc√©:', { mode, creditsRemaining, hasUser: !!user });

      // G√©n√©ration rapide avec template structur√© (sans Opik)
      const finalPrompt = buildStructuredPrompt({
        role: `Expert en ${promptData.context || 'votre domaine'}`,
        context: promptData.context,
        objective: promptData.objective,
        instructions: promptData.constraints.length > 0 ? promptData.constraints : [
          'Analyser la demande en d√©tail',
          'Structurer la r√©ponse de mani√®re claire',
          'Fournir des exemples concrets si pertinent'
        ],
        format: promptData.outputFormat,
        constraints: [
          `Public cible: ${promptData.audience}`,
          `Ton: ${promptData.tone}`,
          ...(promptData.keywords.length > 0 ? [`Mots-cl√©s: ${promptData.keywords.join(', ')}`] : [])
        ],
        style: 'clean'
      });

      const latency = Date.now() - startTime;
      setGeneratedPrompt(finalPrompt);
      setShowPreview(true);

      // Enregistrer la trace dans Opik
      if (user) {
        const traceId = opikService.generateTraceId();
        const promptInput = `Objectif: ${promptData.objective}, Contexte: ${promptData.context}`;

        await opikService.createTrace({
          userId: user.id,
          traceId: traceId,
          promptInput: promptInput,
          promptOutput: finalPrompt,
          model: mode === 'premium' ? 'mistral-large-latest' : 'advanced-builder-template',
          latencyMs: latency,
          tokensUsed: Math.ceil(finalPrompt.length / 4),
          cost: 0,
          tags: {
            source: 'advanced-builder',
            mode,
            hasConstraints: promptData.constraints.length > 0,
            outputFormat: promptData.outputFormat
          }
        });

        console.log('‚úÖ Trace cr√©√©e dans Analytics pour le prompt avanc√©');
      }

      toast({
        title: "Prompt g√©n√©r√© avec succ√®s",
        description: "Votre prompt optimis√© est pr√™t √† √™tre utilis√©."
      });
    } catch (error) {
      console.error('Erreur g√©n√©ration prompt avanc√©:', error);
      toast({
        title: "Erreur de g√©n√©ration",
        description: "Impossible de g√©n√©rer le prompt. R√©essayez.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const currentStepConfig = stepConfigs[currentStep];
  const overallProgress = calculateOverallProgress(completedSteps, stepConfigs.length);
  const isLastStep = currentStep === stepConfigs.length - 1;

  return (
    <TooltipProvider>
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-gray-900 dark:to-blue-900 p-4">
        <div className="max-w-4xl mx-auto">
          
          {/* En-t√™te avec progression */}
          <Card className="mb-6 border-0 shadow-lg bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm">
            <CardHeader className="pb-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="w-10 h-10 bg-gradient-to-br from-violet-500 to-purple-600 rounded-lg flex items-center justify-center shadow-lg">
                    <Brain className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <CardTitle className="text-xl bg-gradient-to-r from-violet-600 to-purple-600 bg-clip-text text-transparent">
                      G√©n√©rateur de Prompts Avanc√©
                    </CardTitle>
                    <p className="text-muted-foreground text-sm">
                      Cr√©ez des prompts optimis√©s √©tape par √©tape
                    </p>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3">
                  <Badge className="bg-gradient-to-r from-emerald-500 to-teal-600 text-white text-xs">
                    √âtape {currentStep + 1}/{stepConfigs.length}
                  </Badge>
                </div>
              </div>
              
              {/* Barre de progression globale */}
              <div className="space-y-2 mt-4">
                <div className="flex justify-between text-sm text-muted-foreground">
                  <span>Progression</span>
                  <span>{Math.round(overallProgress)}%</span>
                </div>
                <Progress 
                  value={overallProgress} 
                  className="h-2 bg-gray-100 dark:bg-gray-700"
                />
              </div>
            </CardHeader>
          </Card>

          {/* Sections color√©es selon les images */}
          <div className="space-y-4">
            {stepConfigs.map((step, index) => {
              const isCurrentStep = index === currentStep;
              const isCompleted = completedSteps.has(index);
              
              // Couleurs selon les images fournies
              const getStepColors = (stepIndex: number) => {
                const colors = [
                  { bg: 'bg-green-50 dark:bg-green-900/20', border: 'border-green-200 dark:border-green-700', accent: 'text-green-700 dark:text-green-300', icon: 'bg-green-100 dark:bg-green-800' },
                  { bg: 'bg-blue-50 dark:bg-blue-900/20', border: 'border-blue-200 dark:border-blue-700', accent: 'text-blue-700 dark:text-blue-300', icon: 'bg-blue-100 dark:bg-blue-800' },
                  { bg: 'bg-purple-50 dark:bg-purple-900/20', border: 'border-purple-200 dark:border-purple-700', accent: 'text-purple-700 dark:text-purple-300', icon: 'bg-purple-100 dark:bg-purple-800' },
                  { bg: 'bg-yellow-50 dark:bg-yellow-900/20', border: 'border-yellow-200 dark:border-yellow-700', accent: 'text-yellow-700 dark:text-yellow-300', icon: 'bg-yellow-100 dark:bg-yellow-800' },
                  { bg: 'bg-red-50 dark:bg-red-900/20', border: 'border-red-200 dark:border-red-700', accent: 'text-red-700 dark:text-red-300', icon: 'bg-red-100 dark:bg-red-800' },
                  { bg: 'bg-indigo-50 dark:bg-indigo-900/20', border: 'border-indigo-200 dark:border-indigo-700', accent: 'text-indigo-700 dark:text-indigo-300', icon: 'bg-indigo-100 dark:bg-indigo-800' }
                ];
                return colors[stepIndex % colors.length];
              };
              
              const colors = getStepColors(index);
              
              return (
                <Card 
                  key={step.id}
                  className={`${colors.bg} ${colors.border} ${isCurrentStep ? 'ring-2 ring-offset-2 ring-blue-500 shadow-lg' : 'shadow-sm'} 
                    transition-all duration-200 cursor-pointer hover:shadow-md`}
                  onClick={() => handleStepChange(index)}
                >
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className={`w-8 h-8 ${colors.icon} rounded-lg flex items-center justify-center`}>
                          <step.icon className={`h-4 w-4 ${colors.accent}`} />
                        </div>
                        <div>
                          <CardTitle className={`text-lg ${colors.accent} flex items-center gap-2`}>
                            {index + 1}. {step.title}
                            {isCompleted && <CheckCircle className="h-4 w-4 text-emerald-600" />}
                          </CardTitle>
                          <p className="text-sm text-muted-foreground">
                            {step.description}
                          </p>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <Badge variant="outline" className={`text-xs ${colors.accent}`}>
                          {step.estimatedTime}
                        </Badge>
                      </div>
                    </div>
                  </CardHeader>

                  {isCurrentStep && (
                    <CardContent className="space-y-4">
                      {/* Feedback de validation */}
                      <ValidationFeedback 
                        errors={validationErrors} 
                        suggestions={stepSuggestions}
                      />
                      
                      {/* Suggestions intelligentes */}
                      {suggestions.length > 0 && (
                        <SmartSuggestions
                          suggestions={suggestions}
                          onApplySuggestion={(suggestion) => {
                            // Appliquer la suggestion selon l'√©tape actuelle
                            applySuggestionToStep(currentStep, suggestion, promptData, setPromptData);
                          }}
                        />
                      )}
                      
                      {/* Contenu de l'√©tape */}
                      <StepContent
                        stepConfig={step}
                        data={promptData}
                        onChange={setPromptData}
                        suggestions={suggestions}
                      />
                      
                      {/* Navigation */}
                      <div className="flex justify-between pt-4 border-t border-gray-200 dark:border-gray-600">
                        <Button
                          onClick={handlePrevious}
                          disabled={currentStep === 0}
                          variant="outline"
                          size="sm"
                          className="flex items-center space-x-2"
                        >
                          <ArrowLeft className="h-4 w-4" />
                          <span>Pr√©c√©dent</span>
                        </Button>
                        
                        {!isLastStep ? (
                          <Button
                            onClick={handleNext}
                            size="sm"
                            className="flex items-center space-x-2 bg-gradient-to-r from-violet-500 to-purple-600 hover:from-violet-600 hover:to-purple-700"
                          >
                            <span>Suivant</span>
                            <ArrowRight className="h-4 w-4" />
                          </Button>
                        ) : (
                          <Button
                            onClick={generatePrompt}
                            disabled={isGenerating}
                            size="sm"
                            className="flex items-center space-x-2 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700"
                          >
                            {isGenerating ? (
                              <>
                                <RefreshCw className="h-4 w-4 animate-spin" />
                                <span>G√©n√©ration...</span>
                              </>
                            ) : (
                              <>
                                <Sparkles className="h-4 w-4" />
                                <span>G√©n√©rer le Prompt Optimis√©</span>
                              </>
                            )}
                          </Button>
                        )}
                      </div>
                    </CardContent>
                  )}
                </Card>
              );
            })}
          </div>

          {/* Pr√©visualisation en temps r√©el */}
          {(promptData.objective || showPreview) && (
            <Card className="mt-6 border-0 shadow-lg bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm">
              <LivePreview
                data={promptData}
                generatedPrompt={generatedPrompt}
                onCopy={() => {
                  navigator.clipboard.writeText(generatedPrompt);
                  toast({ title: "Copi√© !", description: "Prompt copi√© dans le presse-papiers." });
                }}
                onDownload={() => {
                  const blob = new Blob([generatedPrompt], { type: 'text/plain' });
                  const url = URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = 'prompt-optimise.txt';
                  a.click();
                  URL.revokeObjectURL(url);
                  toast({ title: "T√©l√©charg√© !", description: "Prompt sauvegard√©." });
                }}
              />
            </Card>
          )}
        </div>
      </div>
    </TooltipProvider>
  );
};

// Fonctions utilitaires
function applySuggestionToStep(step: number, suggestion: string, data: PromptData, setData: (data: PromptData) => void) {
  switch (step) {
    case 0: // Objectif
      if (suggestion.includes('cr√©er un article')) {
        setData({ ...data, objective: 'Cr√©er un article de blog informatif et engageant' });
      } else if (suggestion.includes('g√©n√©rer du code')) {
        setData({ ...data, objective: 'G√©n√©rer du code fonctionnel et bien document√©' });
      } else if (suggestion.includes('analyser des donn√©es')) {
        setData({ ...data, objective: 'Analyser des donn√©es et fournir des insights utiles' });
      }
      break;
    case 1: // Contexte
      if (suggestion.includes('entreprise')) {
        setData({ ...data, context: 'Dans le contexte d\'une entreprise moderne...' });
      } else if (suggestion.includes('√©ducation')) {
        setData({ ...data, context: 'Dans un environnement √©ducatif...' });
      }
      break;
    case 2: // Audience
      if (suggestion.includes('d√©butants')) {
        setData({ ...data, audience: 'D√©butants sans exp√©rience pr√©alable' });
      } else if (suggestion.includes('experts')) {
        setData({ ...data, audience: 'Professionnels exp√©riment√©s dans le domaine' });
      }
      break;
    case 3: // Ton
      if (suggestion.includes('professionnel')) {
        setData({ ...data, tone: 'professional' });
      } else if (suggestion.includes('cr√©atif')) {
        setData({ ...data, tone: 'creative' });
      }
      break;
    case 4: // Contraintes
      if (suggestion.includes('longueur')) {
        setData({ ...data, constraints: [...data.constraints, 'Maximum 500 mots'] });
      } else if (suggestion.includes('format')) {
        setData({ ...data, outputFormat: 'bullet-points' });
      }
      break;
  }
}

async function getContextualSuggestions(step: number, data: PromptData): Promise<string[]> {
  // Suggestions contextuelles bas√©es sur l'√©tape et les donn√©es existantes
  const suggestionsByStep = {
    0: [ // Objectif
      "Cr√©er un article de blog informatif et engageant",
      "G√©n√©rer du code fonctionnel et bien document√©", 
      "Analyser des donn√©es et fournir des insights utiles",
      "R√©diger un email professionnel persuasif",
      "Expliquer un concept complexe simplement",
      "Cr√©er un tutoriel √©tape par √©tape"
    ],
    1: [ // Contexte
      "Dans le contexte d'une entreprise moderne",
      "Dans un environnement √©ducatif",
      "Pour une audience internationale",
      "Dans le domaine de la technologie",
      "Pour un usage personnel",
      "Dans un contexte cr√©atif"
    ],
    2: [ // Audience
      "D√©butants sans exp√©rience pr√©alable",
      "Professionnels exp√©riment√©s dans le domaine",
      "√âtudiants universitaires",
      "Dirigeants d'entreprise",
      "Grand public",
      "Experts techniques"
    ],
    3: [ // Ton et Style
      "Adopter un ton professionnel et formel",
      "Utiliser un style cr√©atif et inspirant",
      "Employer un langage technique pr√©cis",
      "Privil√©gier un ton amical et accessible",
      "Adopter une approche p√©dagogique",
      "Utiliser un style persuasif"
    ],
    4: [ // Contraintes
      "Limiter la longueur √† 500 mots maximum",
      "Utiliser un format de liste √† puces",
      "Inclure des exemples concrets",
      "√âviter le jargon technique",
      "Structurer en sections courtes",
      "Ajouter des appels √† l'action"
    ],
    5: [ // Optimisation
      "Ajouter des mots-cl√©s pertinents",
      "Am√©liorer la structure du prompt",
      "Pr√©ciser le format de sortie souhait√©",
      "Enrichir le contexte fourni",
      "D√©finir des crit√®res de qualit√©",
      "Inclure des exemples de r√©f√©rence"
    ]
  };
  
  // Filtrer les suggestions bas√©es sur les donn√©es existantes
  let suggestions = suggestionsByStep[step] || [];
  
  // Personnalisation bas√©e sur les donn√©es d√©j√† saisies
  if (step === 1 && data.objective.includes('code')) {
    suggestions = suggestions.filter(s => s.includes('technologie') || s.includes('technique'));
  }
  
  if (step === 2 && data.context.includes('entreprise')) {
    suggestions = suggestions.filter(s => s.includes('professionnel') || s.includes('dirigeants'));
  }
  
  return suggestions.slice(0, 6); // Limiter √† 6 suggestions
}

function buildFinalPrompt(data: PromptData): string {
  return `# Prompt Optimis√©

**Mod√®le IA cibl√©:** ${data.aiModel}

**Objectif principal:** ${data.objective}

**Contexte:** ${data.context}

**Public cible:** ${data.audience}

**Ton et style:** ${data.tone}

**Format de sortie:** ${data.outputFormat}

**Contraintes:**
${data.constraints.map(c => `- ${c}`).join('\n')}

**Mots-cl√©s importants:** ${data.keywords.join(', ')}

---

G√©n√©rez une r√©ponse qui respecte strictement tous ces crit√®res.`;
}

export default AdvancedPromptBuilder;