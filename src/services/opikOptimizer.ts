import { supabase } from '@/integrations/supabase/client';
import { detectLanguage } from '@/lib/languageDetector';

type Language = 'fr' | 'en' | 'ar';

export interface OptimizationResult {
  optimizedPrompt: string;
  improvements: string[];
  score: number;
  tokensReduced?: number;
  clarityImproved?: boolean;
}

class OpikOptimizer {
  private targetLanguage?: Language; // Langue cible pour forcer l'optimisation

  /**
   * Optimise un prompt pour le mode PREMIUM sans compression
   * Garantit un prompt complet selon la longueur demand√©e
   */
  async optimizePromptPremium(
    originalPrompt: string,
    userId: string,
    category?: string,
    targetLength?: 'short' | 'medium' | 'long' | 'very_long'
  ): Promise<OptimizationResult> {
    try {
      console.log('üöÄ Opik Premium Optimization d√©marr√©');
      console.log('üìù Prompt original longueur:', originalPrompt.length);
      console.log('üéØ Longueur cible:', targetLength);

      // Analyser le prompt
      const analysis = this.analyzePrompt(originalPrompt);

      // Mode Premium: Am√©liorer sans r√©sumer
      let optimizedPrompt = originalPrompt;

      // √âTAPE 1: Compl√©ter les prompts incomplets
      optimizedPrompt = this.completeIncompletePrompt(optimizedPrompt);

      // √âTAPE 2: Garantir structure compl√®te
      optimizedPrompt = this.ensureCompleteStructure(optimizedPrompt);

      // √âTAPE 3: Am√©liorer la qualit√© sans r√©duire la longueur
      if (analysis.structure < 7) {
        optimizedPrompt = this.enhanceStructure(optimizedPrompt);
      }

      if (analysis.clarity < 7) {
        optimizedPrompt = this.enhanceClarity(optimizedPrompt);
      }

      // √âTAPE 4: Enrichir si n√©cessaire selon la longueur cible
      if (targetLength === 'very_long' || targetLength === 'long') {
        optimizedPrompt = this.enrichPromptForLength(optimizedPrompt, targetLength);
      }

      // √âTAPE 5: Ajouter sections manquantes essentielles
      if (!analysis.hasRole) {
        optimizedPrompt = this.addRoleSection(optimizedPrompt);
      }

      if (!analysis.hasFormat) {
        optimizedPrompt = this.addFormatSection(optimizedPrompt);
      }

      if (!analysis.hasConstraints) {
        optimizedPrompt = this.addConstraintsSection(optimizedPrompt);
      }

      // Calculer les am√©liorations
      const improvements = this.calculatePremiumImprovements(originalPrompt, optimizedPrompt, analysis);

      // Calculer un score de qualit√©
      const score = this.calculateQualityScore(optimizedPrompt, this.analyzePrompt(optimizedPrompt));

      // Logger l'optimisation
      await this.logOptimization(userId, originalPrompt, optimizedPrompt, score, category);

      console.log('‚úÖ Optimisation Premium termin√©e');
      console.log('üìä Score de qualit√©:', score);
      console.log('üìè Longueur finale:', optimizedPrompt.length, 'caract√®res');

      return {
        optimizedPrompt,
        improvements,
        score,
        clarityImproved: score > 7.5
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'optimisation Premium:', error);
      return {
        optimizedPrompt: originalPrompt,
        improvements: ['Prompt original conserv√©'],
        score: 6
      };
    }
  }

  /**
   * Optimise automatiquement un prompt pour les utilisateurs premium
   */
  async optimizePrompt(
    originalPrompt: string,
    userId: string,
    category?: string,
    targetLanguage?: Language
  ): Promise<OptimizationResult> {
    try {
      console.log('üöÄ Opik Auto-Optimization d√©marr√© pour mode premium');
      console.log('üìù Prompt original longueur:', originalPrompt.length);
      console.log('üåç Langue cible forc√©e:', targetLanguage || 'd√©tection automatique');

      // Forcer la langue cible si fournie
      this.targetLanguage = targetLanguage;

      // Analyser le prompt pour identifier les am√©liorations possibles
      const analysis = this.analyzePrompt(originalPrompt);

      // Appliquer les optimisations Opik
      const optimizedPrompt = await this.applyOptimizations(originalPrompt, analysis);

      // R√©initialiser la langue cible apr√®s optimisation
      this.targetLanguage = undefined;

      // Calculer les am√©liorations
      const improvements = this.calculateImprovements(originalPrompt, optimizedPrompt, analysis);

      // Calculer un score de qualit√©
      const score = this.calculateQualityScore(optimizedPrompt, analysis);

      // Logger l'optimisation dans Supabase
      await this.logOptimization(userId, originalPrompt, optimizedPrompt, score, category);

      console.log('‚úÖ Optimisation Opik termin√©e avec succ√®s');
      console.log('üìä Score de qualit√©:', score);
      console.log('üéØ Am√©liorations appliqu√©es:', improvements.length);

      return {
        optimizedPrompt,
        improvements,
        score,
        tokensReduced: this.estimateTokens(originalPrompt) - this.estimateTokens(optimizedPrompt),
        clarityImproved: score > 7.5
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'optimisation Opik:', error);
      // En cas d'erreur, retourner le prompt original
      return {
        optimizedPrompt: originalPrompt,
        improvements: ['Optimisation non disponible - prompt original conserv√©'],
        score: 5
      };
    }
  }

  /**
   * Analyse un prompt pour identifier les opportunit√©s d'am√©lioration
   */
  private analyzePrompt(prompt: string): {
    hasRole: boolean;
    hasContext: boolean;
    hasConstraints: boolean;
    hasFormat: boolean;
    hasExamples: boolean;
    clarity: number;
    structure: number;
    specificity: number;
  } {
    const lowerPrompt = prompt.toLowerCase();

    return {
      hasRole: /\*\*r√¥le\*\*|tu es|you are|role:|expert|specialist/i.test(prompt),
      hasContext: /\*\*contexte\*\*|context:|background:|situation/i.test(prompt),
      hasConstraints: /\*\*contraintes\*\*|constraints:|limites|requirements/i.test(prompt),
      hasFormat: /\*\*format\*\*|format:|structure:|output/i.test(prompt),
      hasExamples: /exemple|example|par exemple|for example/i.test(prompt),
      clarity: this.assessClarity(prompt),
      structure: this.assessStructure(prompt),
      specificity: this.assessSpecificity(prompt)
    };
  }

  /**
   * √âvalue la clart√© d'un prompt (score 0-10)
   */
  private assessClarity(prompt: string): number {
    let score = 5;

    // Points positifs
    if (prompt.includes('**')) score += 1; // Formatage
    if (prompt.split('\n').length > 3) score += 1; // Structure multi-lignes
    if (prompt.length > 100) score += 0.5; // Suffisamment d√©taill√©
    if (/objectif|goal|purpose/i.test(prompt)) score += 1; // Objectif clair

    // Points n√©gatifs
    if (prompt.length < 50) score -= 2; // Trop court
    if (!/\*\*/.test(prompt)) score -= 1; // Pas de formatage

    return Math.max(0, Math.min(10, score));
  }

  /**
   * √âvalue la structure d'un prompt (score 0-10)
   */
  private assessStructure(prompt: string): number {
    let score = 5;

    const sections = prompt.match(/\*\*[^*]+\*\*/g) || [];
    score += Math.min(sections.length * 0.5, 3); // Sections structur√©es

    if (prompt.includes('-') || prompt.includes('‚Ä¢')) score += 1; // Listes √† puces
    if (prompt.includes('\n\n')) score += 0.5; // Paragraphes s√©par√©s

    return Math.max(0, Math.min(10, score));
  }

  /**
   * √âvalue la sp√©cificit√© d'un prompt (score 0-10)
   */
  private assessSpecificity(prompt: string): number {
    let score = 5;

    // Mots-cl√©s de sp√©cificit√©
    const specificKeywords = ['pr√©cis', 'exact', 'sp√©cifique', 'd√©taill√©', 'mesurable', 'concret'];
    specificKeywords.forEach(keyword => {
      if (new RegExp(keyword, 'i').test(prompt)) score += 0.5;
    });

    // Chiffres et donn√©es quantifiables
    if (/\d+/.test(prompt)) score += 1;

    // Exemples fournis
    if (/exemple|example/i.test(prompt)) score += 1;

    return Math.max(0, Math.min(10, score));
  }

  /**
   * Applique les optimisations bas√©es sur l'analyse
   */
  private async applyOptimizations(prompt: string, analysis: any): Promise<string> {
    let optimized = prompt;

    // √âTAPE 1: Compl√©ter les prompts tronqu√©s ou incomplets
    optimized = this.completeIncompletePrompt(optimized);

    // √âTAPE 2: Si le prompt est trop long, le r√©sumer intelligemment
    const estimatedTokens = this.estimateTokens(optimized);
    if (estimatedTokens > 800) {
      console.log(`‚ö†Ô∏è Prompt trop long (${estimatedTokens} tokens), r√©sum√© intelligent...`);
      optimized = this.smartSummarize(optimized);
    }

    // √âTAPE 3: Garantir une structure compl√®te et coh√©rente
    optimized = this.ensureCompleteStructure(optimized);

    // √âTAPE 4: Si le prompt manque de structure, l'am√©liorer
    if (analysis.structure < 5) {
      optimized = this.improveStructure(optimized);
    }

    // √âTAPE 5: Si le prompt manque de clart√©, l'am√©liorer
    if (analysis.clarity < 6) {
      optimized = this.improveClarity(optimized);
    }

    // √âTAPE 6: Si le prompt manque de sp√©cificit√©, l'am√©liorer
    if (analysis.specificity < 6) {
      optimized = this.improveSpecificity(optimized);
    }

    // √âTAPE 7: Ajouter des sections manquantes essentielles
    if (!analysis.hasRole) {
      optimized = this.addRoleSection(optimized);
    }

    if (!analysis.hasFormat) {
      optimized = this.addFormatSection(optimized);
    }

    if (!analysis.hasConstraints) {
      optimized = this.addConstraintsSection(optimized);
    }

    return optimized;
  }

  /**
   * R√©sume intelligemment un prompt trop long tout en pr√©servant l'essence
   */
  private smartSummarize(prompt: string): string {
    console.log('üìù R√©sum√© intelligent du prompt...');
    const lang = this.getPromptLanguage(prompt);

    // Extraire les sections principales
    const sections = this.extractSections(prompt);

    // Construire un prompt r√©sum√© mais complet
    let summarized = '';

    // R√îLE (garder concis)
    if (sections.role) {
      const roleText = sections.role.split('\n')[0].substring(0, 100);
      if (lang === 'en') {
        summarized += `**ROLE**: ${roleText}\n\n`;
      } else if (lang === 'ar') {
        summarized += `**ÿßŸÑÿØŸàÿ±**: ${roleText}\n\n`;
      } else {
        summarized += `**R√îLE**: ${roleText}\n\n`;
      }
    }

    // OBJECTIF (garder l'essentiel)
    if (sections.objective) {
      const objectiveText = sections.objective.split('\n').slice(0, 2).join(' ').substring(0, 150);
      if (lang === 'en') {
        summarized += `**OBJECTIVE**: ${objectiveText}\n\n`;
      } else if (lang === 'ar') {
        summarized += `**ÿßŸÑŸáÿØŸÅ**: ${objectiveText}\n\n`;
      } else {
        summarized += `**OBJECTIF**: ${objectiveText}\n\n`;
      }
    }

    // CONTEXTE (r√©sumer si trop long)
    if (sections.context) {
      const contextText = sections.context.split('\n').slice(0, 2).join(' ').substring(0, 120);
      if (lang === 'en') {
        summarized += `**CONTEXT**: ${contextText}\n\n`;
      } else if (lang === 'ar') {
        summarized += `**ÿßŸÑÿ≥ŸäÿßŸÇ**: ${contextText}\n\n`;
      } else {
        summarized += `**CONTEXTE**: ${contextText}\n\n`;
      }
    }

    // INSTRUCTIONS (garder les points cl√©s)
    if (sections.instructions) {
      const instructionsList = sections.instructions
        .split('\n')
        .filter(line => line.trim().startsWith('-') || line.trim().startsWith('‚Ä¢'))
        .slice(0, 5);  // Max 5 instructions

      if (instructionsList.length > 0) {
        if (lang === 'en') {
          summarized += `**INSTRUCTIONS**:\n${instructionsList.join('\n')}\n\n`;
        } else if (lang === 'ar') {
          summarized += `**ÿßŸÑÿ™ÿπŸÑŸäŸÖÿßÿ™**:\n${instructionsList.join('\n')}\n\n`;
        } else {
          summarized += `**INSTRUCTIONS**:\n${instructionsList.join('\n')}\n\n`;
        }
      }
    }

    // FORMAT (garder concis)
    if (sections.format) {
      const formatText = sections.format.split('\n').slice(0, 2).join(' ').substring(0, 100);
      if (lang === 'en') {
        summarized += `**FORMAT**: ${formatText}\n\n`;
      } else if (lang === 'ar') {
        summarized += `**ÿßŸÑÿ¥ŸÉŸÑ**: ${formatText}\n\n`;
      } else {
        summarized += `**FORMAT**: ${formatText}\n\n`;
      }
    }

    // CONTRAINTES (garder l'essentiel)
    if (sections.constraints) {
      const constraintsList = sections.constraints
        .split('\n')
        .filter(line => line.trim().startsWith('-') || line.trim().startsWith('‚Ä¢'))
        .slice(0, 3);  // Max 3 contraintes

      if (constraintsList.length > 0) {
        if (lang === 'en') {
          summarized += `**CONSTRAINTS**:\n${constraintsList.join('\n')}`;
        } else if (lang === 'ar') {
          summarized += `**ÿßŸÑŸÇŸäŸàÿØ**:\n${constraintsList.join('\n')}`;
        } else {
          summarized += `**CONTRAINTES**:\n${constraintsList.join('\n')}`;
        }
      }
    }

    console.log(`‚úÖ Prompt r√©sum√©: ${this.estimateTokens(prompt)} ‚Üí ${this.estimateTokens(summarized)} tokens`);
    return summarized.trim();
  }

  /**
   * Extrait les sections d'un prompt structur√©
   */
  private extractSections(prompt: string): {
    role?: string;
    objective?: string;
    context?: string;
    instructions?: string;
    format?: string;
    constraints?: string;
  } {
    const sections: any = {};

    // Patterns pour d√©tecter les sections
    const patterns = {
      role: /\*\*(?:R√îLE|ROLE)\*\*:?\s*([\s\S]*?)(?=\*\*|$)/i,
      objective: /\*\*(?:OBJECTIF|OBJECTIVE|MISSION)\*\*:?\s*([\s\S]*?)(?=\*\*|$)/i,
      context: /\*\*(?:CONTEXTE|CONTEXT)\*\*:?\s*([\s\S]*?)(?=\*\*|$)/i,
      instructions: /\*\*(?:INSTRUCTIONS|T√ÇCHES|TASKS)\*\*:?\s*([\s\S]*?)(?=\*\*|$)/i,
      format: /\*\*(?:FORMAT|LIVRABLE|OUTPUT)\*\*:?\s*([\s\S]*?)(?=\*\*|$)/i,
      constraints: /\*\*(?:CONTRAINTES|CONSTRAINTS|R√àGLES)\*\*:?\s*([\s\S]*?)(?=\*\*|$)/i,
    };

    for (const [key, pattern] of Object.entries(patterns)) {
      const match = prompt.match(pattern);
      if (match && match[1]) {
        sections[key] = match[1].trim();
      }
    }

    return sections;
  }

  /**
   * Garantit que le prompt a une structure compl√®te et coh√©rente
   */
  private ensureCompleteStructure(prompt: string): string {
    console.log('üîç V√©rification structure compl√®te...');
    const lang = this.getPromptLanguage(prompt);

    // V√©rifier que toutes les sections se terminent proprement
    const lines = prompt.split('\n');
    const fixedLines: string[] = [];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const nextLine = i < lines.length - 1 ? lines[i + 1] : null;

      fixedLines.push(line);

      // Si une section commence mais la suivante aussi (section vide)
      if (line.match(/\*\*[A-Z]+\*\*:?\s*$/) && nextLine?.match(/\*\*/)) {
        // Ajouter un contenu par d√©faut selon la langue
        if (line.includes('R√îLE') || line.includes('ROLE') || line.includes('ÿßŸÑÿØŸàÿ±')) {
          if (lang === 'en') {
            fixedLines.push('Expert AI assistant');
          } else if (lang === 'ar') {
            fixedLines.push('ŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ÿßŸÑÿÆÿ®Ÿäÿ±');
          } else {
            fixedLines.push('Expert assistant IA sp√©cialis√©');
          }
        } else if (line.includes('OBJECTIF') || line.includes('OBJECTIVE') || line.includes('ÿßŸÑŸáÿØŸÅ')) {
          if (lang === 'en') {
            fixedLines.push('Accomplish the requested task with precision');
          } else if (lang === 'ar') {
            fixedLines.push('ÿ•ŸÜÿ¨ÿßÿ≤ ÿßŸÑŸÖŸáŸÖÿ© ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© ÿ®ÿØŸÇÿ©');
          } else {
            fixedLines.push('Accomplir la t√¢che demand√©e avec pr√©cision');
          }
        } else if (line.includes('FORMAT') || line.includes('ÿßŸÑÿ¥ŸÉŸÑ')) {
          if (lang === 'en') {
            fixedLines.push('Structured and clear response');
          } else if (lang === 'ar') {
            fixedLines.push('ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÖŸÜÿ∏ŸÖÿ© ŸàŸàÿßÿ∂ÿ≠ÿ©');
          } else {
            fixedLines.push('R√©ponse structur√©e et claire');
          }
        }
      }
    }

    let complete = fixedLines.join('\n');

    // S'assurer que le prompt se termine correctement
    const lastLine = complete.trim().split('\n').pop() || '';
    if (lastLine && !lastLine.match(/[.!?]$/)) {
      complete += '.';
    }

    console.log('‚úÖ Structure compl√®te v√©rifi√©e');
    return complete;
  }

  /**
   * Compl√®te les prompts incomplets ou tronqu√©s
   */
  private completeIncompletePrompt(prompt: string): string {
    const lang = this.getPromptLanguage(prompt);

    // D√©tecter si le prompt se termine de mani√®re incompl√®te
    const lastLine = prompt.trim().split('\n').pop() || '';
    const lastChar = prompt.trim().slice(-1);

    console.log('üîç V√©rification compl√©tude du prompt:', {
      longueur: prompt.length,
      langue: lang,
      derniereLigne: lastLine.substring(0, 50),
      dernierCaract√®re: lastChar
    });

    // Si le prompt se termine au milieu d'un mot ou sans ponctuation
    if (lastChar && !lastChar.match(/[.!?:\n]/)) {
      console.log('‚ö†Ô∏è Prompt incomplet d√©tect√©, compl√©tion en cours...');

      // Si c'est une liste √† puces incompl√®te
      if (lastLine.startsWith('-') || lastLine.startsWith('‚Ä¢')) {
        if (lang === 'en') {
          prompt += '\n- Respect constraints and requested format';
        } else if (lang === 'ar') {
          prompt += '\n- ÿßÿ≠ÿ™ÿ±ÿßŸÖ ÿßŸÑŸÇŸäŸàÿØ ŸàÿßŸÑÿµŸäÿ∫ÿ© ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©';
        } else {
          prompt += '\n- Respect des contraintes et format demand√©';
        }
      }
      // Si c'est une section en cours
      else if (lastLine.includes('**')) {
        if (lang === 'en') {
          prompt += ': Clear and precise instructions';
        } else if (lang === 'ar') {
          prompt += ': ÿ™ÿπŸÑŸäŸÖÿßÿ™ Ÿàÿßÿ∂ÿ≠ÿ© ŸàÿØŸÇŸäŸÇÿ©';
        } else {
          prompt += ': Instructions claires et pr√©cises';
        }
      }
      // Si √ßa se termine au milieu d'une phrase (pas de ponctuation)
      else if (lastLine.length > 0 && !lastLine.match(/[.!?]$/)) {
        // Essayer de terminer la phrase intelligemment
        if (lastLine.includes('libre de') || lastLine.includes('libre d')) {
          prompt += ' droits';
        } else if (lastLine.includes('free of') || lastLine.includes('free from')) {
          prompt += ' rights';
        } else {
          prompt += '.';
        }
      }
      // Sinon, terminer proprement
      else {
        prompt += '.';
      }

      console.log('‚úÖ Prompt compl√©t√©');
    }

    // V√©rifier si des sections essentielles sont incompl√®tes
    const sectionPatterns = [
      { fr: 'R√îLE', en: 'ROLE', ar: 'ÿßŸÑÿØŸàÿ±' },
      { fr: 'OBJECTIF', en: 'OBJECTIVE', ar: 'ÿßŸÑŸáÿØŸÅ' },
      { fr: 'INSTRUCTIONS', en: 'INSTRUCTIONS', ar: 'ÿßŸÑÿ™ÿπŸÑŸäŸÖÿßÿ™' },
      { fr: 'FORMAT', en: 'FORMAT', ar: 'ÿßŸÑÿ¥ŸÉŸÑ' },
      { fr: 'CONTRAINTES', en: 'CONSTRAINTS', ar: 'ÿßŸÑŸÇŸäŸàÿØ' }
    ];

    for (const pattern of sectionPatterns) {
      const sectionRegex = new RegExp(`\\*\\*(${pattern.fr}|${pattern.en}|${pattern.ar})\\*\\*:?\\s*$`, 'im');
      if (sectionRegex.test(prompt)) {
        // Section pr√©sente mais vide, ajouter du contenu par d√©faut
        const sectionType = pattern.fr;

        if (lang === 'en') {
          switch (sectionType) {
            case 'R√îLE':
              prompt += ' Expert AI assistant';
              break;
            case 'OBJECTIF':
              prompt += ' Provide precise and structured response';
              break;
            case 'INSTRUCTIONS':
              prompt += '\n- Analyze request carefully\n- Structure response clearly\n- Respect requested format';
              break;
            case 'FORMAT':
              prompt += ' Structured and professional response';
              break;
            case 'CONTRAINTES':
              prompt += '\n- Professional and precise tone\n- Complete and detailed response';
              break;
          }
        } else if (lang === 'ar') {
          switch (sectionType) {
            case 'R√îLE':
              prompt += ' ŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ÿßŸÑÿÆÿ®Ÿäÿ±';
              break;
            case 'OBJECTIF':
              prompt += ' ÿ™ŸÇÿØŸäŸÖ ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ÿØŸÇŸäŸÇÿ© ŸàŸÖŸÜÿ∏ŸÖÿ©';
              break;
            case 'INSTRUCTIONS':
              prompt += '\n- ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ∑ŸÑÿ® ÿ®ÿπŸÜÿßŸäÿ©\n- ŸáŸäŸÉŸÑÿ© ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ÿ®Ÿàÿ∂Ÿàÿ≠\n- ÿßÿ≠ÿ™ÿ±ÿßŸÖ ÿßŸÑÿµŸäÿ∫ÿ© ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©';
              break;
            case 'FORMAT':
              prompt += ' ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÖŸÜÿ∏ŸÖÿ© ŸàŸÖŸáŸÜŸäÿ©';
              break;
            case 'CONTRAINTES':
              prompt += '\n- ÿ£ÿ≥ŸÑŸàÿ® ŸÖÿ≠ÿ™ÿ±ŸÅ ŸàÿØŸÇŸäŸÇ\n- ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÉÿßŸÖŸÑÿ© ŸàŸÖŸÅÿµŸÑÿ©';
              break;
          }
        } else {
          switch (sectionType) {
            case 'R√îLE':
              prompt += ' Expert assistant IA sp√©cialis√©';
              break;
            case 'OBJECTIF':
              prompt += ' Fournir une r√©ponse pr√©cise et structur√©e';
              break;
            case 'INSTRUCTIONS':
              prompt += '\n- Analyser la demande attentivement\n- Structurer la r√©ponse de mani√®re claire\n- Respecter le format demand√©';
              break;
            case 'FORMAT':
              prompt += ' R√©ponse structur√©e et professionnelle';
              break;
            case 'CONTRAINTES':
              prompt += '\n- Ton professionnel et pr√©cis\n- R√©ponse compl√®te et d√©taill√©e';
              break;
          }
        }
      }
    }

    return prompt.trim();
  }

  /**
   * Am√©liore la structure d'un prompt
   */
  private improveStructure(prompt: string): string {
    // Ajouter du formatage si manquant
    if (!prompt.includes('**')) {
      const lines = prompt.split('\n');
      if (lines.length > 0 && lines[0].length < 100) {
        lines[0] = `**OBJECTIF**\n${lines[0]}`;
      }
      return lines.join('\n');
    }
    return prompt;
  }

  /**
   * Am√©liore la clart√© d'un prompt
   */
  private improveClarity(prompt: string): string {
    // Ajouter des sauts de ligne pour s√©parer les sections
    let improved = prompt.replace(/(\*\*[^*]+\*\*:)/g, '\n$1\n');

    // Ajouter des listes √† puces si liste d√©tect√©e
    improved = improved.replace(/(\d+\.\s)/g, '- ');

    return improved.trim();
  }

  /**
   * Am√©liore la sp√©cificit√© d'un prompt
   */
  private improveSpecificity(prompt: string): string {
    const lang = this.getPromptLanguage(prompt);

    // Si le prompt est trop vague, ajouter une note de sp√©cificit√©
    const hasSpecificityKeywords = /pr√©cis|precise|exact|detailed|ÿØŸÇŸäŸÇ|ŸÖŸÅÿµŸÑ/i.test(prompt);

    if (prompt.length < 100 && !hasSpecificityKeywords) {
      if (lang === 'en') {
        return `${prompt}\n\n**NOTE**: Be precise and detailed in your response.`;
      } else if (lang === 'ar') {
        return `${prompt}\n\n**ŸÖŸÑÿßÿ≠ÿ∏ÿ©**: ŸÉŸÜ ÿØŸÇŸäŸÇÿßŸã ŸàŸÖŸÅÿµŸÑÿßŸã ŸÅŸä ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ.`;
      } else {
        return `${prompt}\n\n**NOTE**: Sois pr√©cis et d√©taill√© dans ta r√©ponse.`;
      }
    }
    return prompt;
  }

  /**
   * D√©tecte la langue du prompt pour adaptation
   * Si targetLanguage est d√©fini, l'utilise en priorit√©
   */
  private getPromptLanguage(prompt: string): Language {
    // Si une langue cible est forc√©e, l'utiliser
    if (this.targetLanguage) {
      console.log('‚úÖ Utilisation de la langue cible forc√©e:', this.targetLanguage);
      return this.targetLanguage;
    }

    // Sinon, d√©tecter automatiquement
    const detected = detectLanguage(prompt);
    console.log('üîç Langue d√©tect√©e automatiquement:', detected);
    return detected;
  }

  /**
   * Ajoute une section r√¥le si manquante
   */
  private addRoleSection(prompt: string): string {
    const lang = this.getPromptLanguage(prompt);

    if (lang === 'en') {
      return `**ROLE**: Expert AI assistant\n\n${prompt}`;
    } else if (lang === 'ar') {
      return `**ÿßŸÑÿØŸàÿ±**: ŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ÿßŸÑÿÆÿ®Ÿäÿ±\n\n${prompt}`;
    }
    return `**R√îLE**: Expert assistant IA\n\n${prompt}`;
  }

  /**
   * Ajoute une section format si manquante
   */
  private addFormatSection(prompt: string): string {
    const lang = this.getPromptLanguage(prompt);

    if (lang === 'en') {
      return `${prompt}\n\n**FORMAT**: Structured and clear response`;
    } else if (lang === 'ar') {
      return `${prompt}\n\n**ÿßŸÑÿ¥ŸÉŸÑ**: ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÖŸÜÿ∏ŸÖÿ© ŸàŸàÿßÿ∂ÿ≠ÿ©`;
    }
    return `${prompt}\n\n**FORMAT**: R√©ponse structur√©e et claire`;
  }

  /**
   * Ajoute une section contraintes si manquante
   */
  private addConstraintsSection(prompt: string): string {
    const lang = this.getPromptLanguage(prompt);

    if (lang === 'en') {
      return `${prompt}\n\n**CONSTRAINTS**:\n- Professional and precise tone\n- Complete and structured response`;
    } else if (lang === 'ar') {
      return `${prompt}\n\n**ÿßŸÑŸÇŸäŸàÿØ**:\n- ÿ£ÿ≥ŸÑŸàÿ® ŸÖÿ≠ÿ™ÿ±ŸÅ ŸàÿØŸÇŸäŸÇ\n- ÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ŸÉÿßŸÖŸÑÿ© ŸàŸÖŸÜÿ∏ŸÖÿ©`;
    }
    return `${prompt}\n\n**CONTRAINTES**:\n- Ton professionnel et pr√©cis\n- R√©ponse compl√®te et structur√©e`;
  }

  /**
   * Calcule les am√©liorations apport√©es
   */
  private calculateImprovements(original: string, optimized: string, analysis: any): string[] {
    const improvements: string[] = [];

    // D√©tecter si le prompt original √©tait incomplet
    const lastChar = original.trim().slice(-1);
    if (!lastChar.match(/[.!?:]/)) {
      improvements.push('Compl√©tion du prompt tronqu√©');
    }

    // D√©tecter si un r√©sum√© intelligent a √©t√© appliqu√©
    const originalTokens = this.estimateTokens(original);
    const optimizedTokens = this.estimateTokens(optimized);

    if (originalTokens > 800 && optimizedTokens < originalTokens * 0.7) {
      improvements.push('R√©sum√© intelligent appliqu√© (prompt trop long)');
      improvements.push(`Optimisation: ${originalTokens} ‚Üí ${optimizedTokens} tokens (-${Math.round((1 - optimizedTokens/originalTokens) * 100)}%)`);
    }

    if (!analysis.hasRole && optimized.includes('**R√îLE**')) {
      improvements.push('Ajout d\'une d√©finition de r√¥le claire');
    }

    if (!analysis.hasFormat && optimized.includes('**FORMAT**')) {
      improvements.push('Sp√©cification du format de sortie');
    }

    if (!analysis.hasConstraints && optimized.includes('**CONTRAINTES**')) {
      improvements.push('Ajout des contraintes et r√®gles');
    }

    if (analysis.structure < 5) {
      improvements.push('Am√©lioration de la structure et du formatage');
    }

    if (analysis.clarity < 6) {
      improvements.push('Am√©lioration de la clart√© et de la lisibilit√©');
    }

    if (analysis.specificity < 6) {
      improvements.push('Augmentation de la sp√©cificit√© et de la pr√©cision');
    }

    // D√©tecter si la structure a √©t√© compl√©t√©e
    if (optimized.includes('**R√îLE**') && optimized.includes('**OBJECTIF**') &&
        optimized.includes('**FORMAT**') && optimized.includes('**CONTRAINTES**')) {
      improvements.push('Structure compl√®te garantie (R√¥le, Objectif, Format, Contraintes)');
    }

    return improvements.length > 0 ? improvements : ['Prompt d√©j√† optimis√©'];
  }

  /**
   * Calcule un score de qualit√© pour le prompt optimis√©
   */
  private calculateQualityScore(prompt: string, analysis: any): number {
    let score = 5;

    // Crit√®res de qualit√©
    score += analysis.clarity * 0.3;
    score += analysis.structure * 0.3;
    score += analysis.specificity * 0.2;

    if (analysis.hasRole) score += 0.5;
    if (analysis.hasContext) score += 0.5;
    if (analysis.hasConstraints) score += 0.5;
    if (analysis.hasFormat) score += 0.5;
    if (analysis.hasExamples) score += 0.5;

    return Math.min(10, Math.max(0, score));
  }

  /**
   * Estime le nombre de tokens dans un prompt
   */
  private estimateTokens(text: string): number {
    // Estimation approximative : ~0.75 token par mot
    return Math.ceil(text.split(/\s+/).length * 0.75);
  }

  /**
   * Log l'optimisation dans Supabase pour tracking
   */
  private async logOptimization(
    userId: string,
    originalPrompt: string,
    optimizedPrompt: string,
    score: number,
    category?: string
  ): Promise<void> {
    try {
      console.log('üìù Logging optimization (skipped - table removed)');
    } catch (error) {
      console.error('Exception lors du logging:', error);
    }
  }

  /**
   * Enrichit un prompt selon la longueur cible demand√©e
   */
  private enrichPromptForLength(prompt: string, targetLength: 'long' | 'very_long'): string {
    console.log(`üéØ Enrichissement du prompt pour longueur: ${targetLength}`);
    const lang = this.getPromptLanguage(prompt);

    const sections = this.extractSections(prompt);
    let enriched = prompt;

    // Pour les prompts longs et tr√®s longs, ajouter du contenu si les sections sont trop courtes
    if (targetLength === 'very_long') {
      // Ajouter section EXEMPLES si manquante
      const hasExamples = /\*\*(EXEMPLES|EXAMPLES|ÿ£ŸÖÿ´ŸÑÿ©)\*\*/i.test(enriched);
      if (!hasExamples) {
        if (lang === 'en') {
          enriched += `\n\n**EXAMPLES**:\n1. [Concrete example illustrating the application]\n2. [Specific use case with context]\n3. [Detailed scenario showing steps]`;
        } else if (lang === 'ar') {
          enriched += `\n\n**ÿ£ŸÖÿ´ŸÑÿ©**:\n1. [ŸÖÿ´ÿßŸÑ ŸÖŸÑŸÖŸàÿ≥ ŸäŸàÿ∂ÿ≠ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ]\n2. [ÿ≠ÿßŸÑÿ© ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÖÿ≠ÿØÿØÿ© ŸÖÿπ ÿßŸÑÿ≥ŸäÿßŸÇ]\n3. [ÿ≥ŸäŸÜÿßÿ±ŸäŸà ŸÖŸÅÿµŸÑ ŸäŸàÿ∂ÿ≠ ÿßŸÑÿÆÿ∑Ÿàÿßÿ™]`;
        } else {
          enriched += `\n\n**EXEMPLES**:\n1. [Exemple concret illustrant l'application]\n2. [Cas d'usage sp√©cifique avec contexte]\n3. [Sc√©nario d√©taill√© montrant les √©tapes]`;
        }
      }

      // Ajouter section WORKFLOW si manquante
      const hasWorkflow = /\*\*(WORKFLOW|PROCESSUS|PROCESS|ÿ≥Ÿäÿ± ÿßŸÑÿπŸÖŸÑ)\*\*/i.test(enriched);
      if (!hasWorkflow) {
        if (lang === 'en') {
          enriched += `\n\n**WORKFLOW**:\n1. Preparation and analysis phase\n2. Methodical execution phase\n3. Review and validation phase\n4. Delivery and documentation phase`;
        } else if (lang === 'ar') {
          enriched += `\n\n**ÿ≥Ÿäÿ± ÿßŸÑÿπŸÖŸÑ**:\n1. ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ™ÿ≠ÿ∂Ÿäÿ± ŸàÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ\n2. ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑŸÖŸÜŸáÿ¨Ÿä\n3. ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ© ŸàÿßŸÑÿ™ÿ≠ŸÇŸÇ\n4. ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ™ÿ≥ŸÑŸäŸÖ ŸàÿßŸÑÿ™Ÿàÿ´ŸäŸÇ`;
        } else {
          enriched += `\n\n**WORKFLOW**:\n1. Phase de pr√©paration et analyse\n2. Phase d'ex√©cution m√©thodique\n3. Phase de r√©vision et validation\n4. Phase de livraison et documentation`;
        }
      }

      // Ajouter section CONSID√âRATIONS si manquante
      const hasConsiderations = /\*\*(CONSID√âRATIONS|CONSIDERATIONS|ÿßÿπÿ™ÿ®ÿßÿ±ÿßÿ™)\*\*/i.test(enriched);
      if (!hasConsiderations) {
        if (lang === 'en') {
          enriched += `\n\n**CONSIDERATIONS**:\n- Technical aspects to consider\n- Business and regulatory constraints\n- Best practices and recommendations\n- Particular points of attention`;
        } else if (lang === 'ar') {
          enriched += `\n\n**ÿßÿπÿ™ÿ®ÿßÿ±ÿßÿ™**:\n- ÿßŸÑÿ¨ŸàÿßŸÜÿ® ÿßŸÑÿ™ŸÇŸÜŸäÿ© ÿßŸÑÿ™Ÿä Ÿäÿ¨ÿ® ŸÖÿ±ÿßÿπÿßÿ™Ÿáÿß\n- ÿßŸÑŸÇŸäŸàÿØ ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ© ŸàÿßŸÑÿ™ŸÜÿ∏ŸäŸÖŸäÿ©\n- ÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÖŸÖÿßÿ±ÿ≥ÿßÿ™ ŸàÿßŸÑÿ™ŸàÿµŸäÿßÿ™\n- ŸÜŸÇÿßÿ∑ ÿßŸÑÿßŸáÿ™ŸÖÿßŸÖ ÿßŸÑÿÆÿßÿµÿ©`;
        } else {
          enriched += `\n\n**CONSID√âRATIONS**:\n- Aspects techniques √† prendre en compte\n- Contraintes m√©tier et r√©glementaires\n- Bonnes pratiques et recommandations\n- Points d'attention particuliers`;
        }
      }
    } else if (targetLength === 'long') {
      // Pour les prompts longs, ajouter section M√âTHODOLOGIE si manquante
      const hasMethodology = /\*\*(M√âTHODOLOGIE|METHODOLOGY|APPROCHE|APPROACH|ÿßŸÑŸÖŸÜŸáÿ¨Ÿäÿ©)\*\*/i.test(enriched);
      if (!hasMethodology) {
        if (lang === 'en') {
          enriched += `\n\n**METHODOLOGY**:\n- Structured and iterative approach\n- Validation at each key step\n- Documentation and traceability`;
        } else if (lang === 'ar') {
          enriched += `\n\n**ÿßŸÑŸÖŸÜŸáÿ¨Ÿäÿ©**:\n- ŸÜŸáÿ¨ ŸÖŸÜÿ∏ŸÖ ŸàŸÖÿ™ŸÉÿ±ÿ±\n- ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÅŸä ŸÉŸÑ ÿÆÿ∑Ÿàÿ© ÿ±ÿ¶Ÿäÿ≥Ÿäÿ©\n- ÿßŸÑÿ™Ÿàÿ´ŸäŸÇ ŸàÿßŸÑÿ™ÿ™ÿ®ÿπ`;
        } else {
          enriched += `\n\n**M√âTHODOLOGIE**:\n- Approche structur√©e et it√©rative\n- Validation √† chaque √©tape cl√©\n- Documentation et tra√ßabilit√©`;
        }
      }
    }

    return enriched;
  }

  /**
   * Am√©liore la structure d'un prompt sans le compresser
   */
  private enhanceStructure(prompt: string): string {
    console.log('üìê Am√©lioration de la structure...');

    // S'assurer que les sections sont bien s√©par√©es
    let enhanced = prompt.replace(/(\*\*[A-Z][^*]+\*\*:)/g, '\n\n$1');

    // Ajouter des sauts de ligne entre les listes
    enhanced = enhanced.replace(/(-\s[^\n]+)(\n)(-\s)/g, '$1\n$2$3');

    // Nettoyer les sauts de ligne multiples (max 2)
    enhanced = enhanced.replace(/\n{3,}/g, '\n\n');

    return enhanced.trim();
  }

  /**
   * Am√©liore la clart√© d'un prompt sans le compresser
   */
  private enhanceClarity(prompt: string): string {
    console.log('‚ú® Am√©lioration de la clart√©...');
    const lang = this.getPromptLanguage(prompt);

    let enhanced = prompt;

    // S'assurer que chaque section a une description claire
    const sections = this.extractSections(enhanced);

    // Si OBJECTIF est trop court, l'enrichir
    if (sections.objective && sections.objective.length < 50) {
      if (lang === 'en') {
        enhanced = enhanced.replace(
          /(\*\*(OBJECTIF|OBJECTIVE)\*\*:?\s*)([^\n*]+)/i,
          '$1$3 in a precise and measurable manner, respecting expected quality criteria'
        );
      } else if (lang === 'ar') {
        enhanced = enhanced.replace(
          /(\*\*(OBJECTIF|OBJECTIVE|ÿßŸÑŸáÿØŸÅ)\*\*:?\s*)([^\n*]+)/i,
          '$1$3 ÿ®ÿ∑ÿ±ŸäŸÇÿ© ÿØŸÇŸäŸÇÿ© ŸàŸÇÿßÿ®ŸÑÿ© ŸÑŸÑŸÇŸäÿßÿ≥ÿå ŸÖÿπ ÿßÿ≠ÿ™ÿ±ÿßŸÖ ŸÖÿπÿßŸäŸäÿ± ÿßŸÑÿ¨ŸàÿØÿ© ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©'
        );
      } else {
        enhanced = enhanced.replace(
          /(\*\*OBJECTIF\*\*:?\s*)([^\n*]+)/i,
          '$1$2 de mani√®re pr√©cise et mesurable, en respectant les crit√®res de qualit√© attendus'
        );
      }
    }

    return enhanced;
  }

  /**
   * Calcule les am√©liorations pour le mode premium (sans compression)
   */
  private calculatePremiumImprovements(original: string, optimized: string, analysis: any): string[] {
    const improvements: string[] = [];

    // D√©tecter si le prompt √©tait incomplet
    const lastChar = original.trim().slice(-1);
    if (!lastChar.match(/[.!?:]/)) {
      improvements.push('‚úì Compl√©tion du prompt tronqu√©');
    }

    if (!analysis.hasRole && optimized.includes('**R√îLE**')) {
      improvements.push('‚úì Ajout d\'une d√©finition de r√¥le professionnelle');
    }

    if (!analysis.hasFormat && optimized.includes('**FORMAT**')) {
      improvements.push('‚úì Sp√©cification du format de sortie attendu');
    }

    if (!analysis.hasConstraints && optimized.includes('**CONTRAINTES**')) {
      improvements.push('‚úì Ajout des contraintes et r√®gles m√©tier');
    }

    if (analysis.structure < 7) {
      improvements.push('‚úì Am√©lioration de la structure et du formatage');
    }

    if (analysis.clarity < 7) {
      improvements.push('‚úì Am√©lioration de la clart√© et de la lisibilit√©');
    }

    // D√©tecter les enrichissements premium
    if (optimized.includes('**EXEMPLES**')) {
      improvements.push('‚úì Ajout d\'exemples concrets et d√©taill√©s');
    }

    if (optimized.includes('**WORKFLOW**') || optimized.includes('**PROCESSUS**')) {
      improvements.push('‚úì Ajout d\'un workflow structur√© multi-√©tapes');
    }

    if (optimized.includes('**M√âTHODOLOGIE**') || optimized.includes('**APPROCHE**')) {
      improvements.push('‚úì Ajout d\'une m√©thodologie professionnelle');
    }

    if (optimized.includes('**CONSID√âRATIONS**')) {
      improvements.push('‚úì Ajout de consid√©rations techniques et m√©tier');
    }

    // Analyser la compl√©tude
    const originalTokens = this.estimateTokens(original);
    const optimizedTokens = this.estimateTokens(optimized);

    if (optimizedTokens > originalTokens) {
      improvements.push(`‚úì Enrichissement: ${originalTokens} ‚Üí ${optimizedTokens} tokens (+${Math.round((optimizedTokens/originalTokens - 1) * 100)}%)`);
    } else if (optimizedTokens === originalTokens) {
      improvements.push('‚úì Structure optimis√©e sans perte de contenu');
    }

    improvements.push('‚úì Mode Premium: Prompt complet pr√©serv√© sans compression');

    return improvements.length > 0 ? improvements : ['‚úì Prompt premium optimis√©'];
  }
}

export const opikOptimizer = new OpikOptimizer();
